#!/usr/bin/env bash
echo "load gitbash!"
nxshell=""
if [[ $(ps $$ | grep $$ |  awk '{print $5}') == 'bash' ]];then
source $(dirname $0)/git-completion.bash
nxshell="bash"
elif [[ $(ps $$ | grep $$ |  awk '{print $5}') == '-zsh' ]];then
zstyle ':completion:*:*:git:*' script ~/.git-completion.zsh
nxshell="zsh"
fi

# 
# git alias
# start working

echo $0 loaded!
# export GIT_TRACE=1
# export GIT_TRANSFER_TRACE=1
# export GIT_CURL_VERBOSE=1

function cgit() {
    if [[ ! -d $1 ]];then
        echo "first input must be dir path."
        return 1
    fi
    git -C $@
}

function xg() {
    if [[ ! -d $1 ]];then
        cgit $(pwd) ${*}
    else
        cgit $1 ${@:2}
    fi
}

function SetGitTrace() {
    if [[ -z $1 || $1 == '0' ]];then
        unset GIT_TRACE
        unset GIT_TRANSFER_TRACE
    else
        export GIT_TRACE=1
        export GIT_TRANSFER_TRACE=1
    fi
}

function SetGitVerbose() {
    if [[ -z $1 || $1 == '0' ]];then
        unset GIT_CURL_VERBOSE
    else
        export GIT_CURL_VERBOSE=1   
    fi
}


# alias clone="git clone"
function clone() {
    xg clone $@
    gen_git_hooks
}

# alias init="git init"
function init() {
    xg init $@
    gen_git_hooks
}

function gen_git_hooks() {
    if [[ ! -f .git/hooks/post-checkout ]];then
        echo 
'echo "checked out"
echo $pwd
if [[ -f ./Podfile && -f $(which pod) ]];then
    pod install
fi
' > .git/hooks/post-checkout
    fi

    
}

# sync repostory

function pullcur() {
    remote="origin"
    if [[ -z $1 ]];then
        echo "push_curr use default remote: \"origin\""
    else
        remote=$1
    fi
    git pull $remote $(git branch --show-current) && clear
}

function pushcur {
    remote="origin"
    if [[ -z $1 ]];then
        echo "push_curr use default remote: \"origin\""
    else
        remote=$1
    fi
    git push  $remote $(git branch --show-current) && clear
}

function pushall() {
    remote='origin'
    if [[ -z $1 ]];then
        echo "push_curr use default remote: \"origin\""
    else
        remote=$1
    fi
    git push $remote --all && clear
}

function fetchall() {
    remote="origin"
    if [[ -z $1 ]];then
        echo "push_curr use default remote: \"origin\""
    else
        remote=$1
    fi
    git fetch $remote -a && clear
}


# abbreviate for svn users.

alias co='git checkout'
alias st='git status'
alias up='git up'
alias di='git diff'
alias wk='git worktree'
alias lfs='git lfs'
alias log='git log'
alias br="git branch"
alias ft="git fetch" # conflict with google depo_tools 

alias reset='git reset'
alias clean='git clean'
alias merge="git merge"
alias rebase="git rebase"
alias tag="git tag"
alias stashl="git stash list"
alias stash="git stash"
alias remote="git remote"
alias pull="git pull"
alias push="git push"
alias reflog="git reflog"
alias bisect='git bisect'

# compound with arguments
# git utilities
alias brl="git branch --list"
alias brc='git branch --show-current'

alias cleangit="git reset --hard && git clean -df"

alias add='git add'
alias adda="git add --all"
alias addc="git add --all && git commit"
alias addca="git add --all && git commit --amend"

alias logg="git log --graph"
alias logo="git log --oneline"
alias loggo="git log --graph --oneline"
alias logflw="git log --follow"

alias ci='git commit'
alias cempty='git commit --allow-empty'
alias camend='git commit --amend'

alias gmv='git mv'

alias grm='git rm'

function cco() {
    xg checkout $@
}

function cci() {
    xg commit $@
}

# git lfs command alias

if [[ ! -f $(which git-lfs) ]];then
    echo "git-lfs not be installed."
    echo "Please visit site: https://git-lfs.github.com/"
else
    echo "git-lfs has been installed."
    echo "you can use "lfs pull" instead of "git lfs pull""
fi

#git -C command alias
# function gitc() {
# 	if [[ -d $2 ]];then
# 		echo "Must input path to \"gitc\""
# 		echo "Example: gitc log path"
# 		return 1
# 	elif [[ -z $1 ]]; then
# 		echo "Must input command to \"gitc\""
# 		echo "Example: gitc log path"
# 		return 1
# 	fi

# 	git -C $2 $1
# }

# function gitc_alias() {
# 	if [[ ! -d $1 ]];then
# 		echo "Please input a git repo dir."
# 		return 1
# 	fi

# 	alias gitca="git -C $1"
# }

function new_git_alias() {
    echo "new_gitc_alias()"
    echo "usage:"
    echo "new_gitc_alias Sub-name Some-repo-path"

    if [[ -z $1 ]];then
        echo "Please input git -C alias sub name"
        return 1
    fi

    if [[ ! -d $2 ]];then
        echo "Please input git -C home dir"
        return 1
    fi


    aname=$1
    home_dir=$2

    alias git_"$aname"='git -C $home_dir'
    alias log_"$aname"='git -C $home_dir log'
    alias co_"$aname"='git -C $home_dir checkout'
    alias di_"$aname"='git -C $home_dir diff'
    alias push_"$aname"='git -C $home_dir push'
    alias pull_"$aname"='git -C $home_dir pull'
    alias fetch_"$aname"='git -C $home_dir fetch'
    alias remote_"$aname"='git -C $home_dir remote'

    echo "create git command: git_$aname"
    echo "create git command: log_$aname"
    echo "create git command: co_$aname"
    echo "create git command: di_$aname"
    echo "create git command: push_$aname"
    echo "create git command: pull_$aname"
    echo "create git command: fetch_$aname"
    echo "create git command: remote_$aname"
}

function unalias_git() {
    if [[ -z $1 ]];then
        echo "Please input git -C alias sub name"
        return 1
    fi
    aname=$1
    unalias git_"$aname"
    unalias log_"$aname"
    unalias co_"$aname"
    unalias di_"$aname"
    unalias push_"$aname"
    unalias pull_"$aname"
    unalias fetch_"$aname"
    unalias remote_"$aname"

    echo "remove git command: git_$aname"
    echo "remove git command: log_$aname"
    echo "remove git command: co_$aname"
    echo "remove git command: di_$aname"
    echo "remove git command: push_$aname"
    echo "remove git command: pull_$aname"
    echo "remove git command: fetch_$aname"
    echo "remove git command: remote_$aname"
}

# specify workspace
# alias gitc="gitc"
# alias logc="gitc log"
# alias coc="gitc checkout"
# alias diffc="gitc diff"
# alias addc="gitc add"
# alias fetchc="gitc fetch"

function difile() {
    br1=$1
    br2=$2
    file=$3
    if [[ -z $br1 || -z $br2 || -z $file ]];then
        echo "Please input branch1 branch2 and last filen name"
        echo "difile commit1 commit2 filename"
        echo "difile branch1 branc2 filename"
        return 1
    fi
    git diff $br1 $br2 $(find . -name $3)
}

function ciadd() {
    if [[ -z $1 ]];then
        echo "Comments should not be empty."
        return 1
    fi
    git commit -m "【add】"$1
}

function ciupdate() {
    if [[ -z $1 ]];then
        echo "Comments should not be empty."
        return 1
    fi

    git commit -m "【update】"$1
}

function cifix() {
    if [[ -z $1 ]];then
        echo "Comments should not be empty."
        return 1
    fi
    git commit -m "【fix】"$1
}

# fetch repository and remote 
function fr()
{
    # fetch repo
	# echo "fetch project $1"
    repo_path=$1
    if [[ -z $repo_path ]];then
        echo "Please input git repo path."
        return 1
    elif [[ ! -d $repo_path  ]];then
        echo "$repo_path does not exist."
        return 1
    fi

    remote_name="origin"
    if [[ -z $2 ]];then
        echo "use origin as default remote name."
    elif [[ -z $(git -C $repo_path remote show | grep $2) ]];then
        echo "remote $2 not exist."
        return 1
    fi
		echo remote_name: $remote_name
    # remote_name=$(git -C $repo_path remote show | grep $2)

    echo "begin:$repo_path"
    #echo git -C $repo_path fetch $remote_name -a
    git -C $repo_path fetch $remote_name -a
    echo "finsihed"
}

# fetch all repos in current path
function frall() {
    if [[ -z $1 ]];then
        echo "Please input git repo path."
        return 1
    elif [[ ! -d $1  ]];then
        echo "$1 does not exist."
        return 1
    fi
    projDir=$1
    for repo in $(find $projDir -name *.git | sed "s/.git//g"); do
		echo "fr $repo"
		fr $repo; 
	done
}

# Fetch all repos in specified path, based on bash command: 'ls'
function fetch_all_repo() {
    the_path=$1
    if [[ ! -d  $the_path ]];then
        echo "first input must be a exist path"
        return 1
    fi

    for repo in $(ls $the_path);do 
        echo $the_path/$repo; 
        if [[ -d $the_path/$repo/.git ]];then 
            git -C $the_path/$repo fetch origin -a;
        else
            echo $the_path/$repo is not a git repo 
        fi; 
    done
}

# use make push git repo
function gmake() {
	[ ! -d $HOME/.xcompile ] && git clone https://gitee.com/dehengxu/xcompile.git $HOME/.xcompile
	make -f $HOME/.xcompile/makefiles/makefile_git $1
}


